###########
INSTALL.txt
###########

The installation process for alti+server is very straight forward.  The
software consists of one file which contains all necessary code and information:

  alti+server


======================
Step 0, Setup Altitude
======================
You must install altitude, and use the server_configurator to setup your
server before beginning.  This is true if you use alti+server or not.
When configuring your server, remember that you can only have one server
if you use alti+server.  server_configurator allows you to configure
multiple servers, as the base Nimbly code supports this.  However, this
does not work with alti+server.


=======================
Step 1, dependencies
=======================

If your systems is a bare-bones installation, you may have to install
some of these dependencies.  Many systems already have them all.

Required:
  1. perl
  2. perl-JSON-XS
  3. perl-XML-Simple
  4. perl-Curses
  5. perl-Digest-SHA
  6. perl-TermReadKey

Recommended:
  1. GeoIP
  2. curl
  3. perl-HTML-Parser
  4. xz (or on some systems xz-lzma-compat), you want the lzma binary.

Optional:
  1. git
  2. screen, or
  3. tmux
  4. java (you may need a different one from what comes with altitude)

Each of the above packages has it's own dependencies which should be taken
care of by your package manager.

=======================
Step 2, the alti+server
=======================

Copy this file to wherever you want.  It does not need to be co-located
with the Altitiude software, the author stores this code in the account
which runs the software's ~/bin directory.  If you prefer to keep the code
up-to-date via GIT, you can also create a symbolic link from this location
to where you keep the code checked-out.

Find the $INSTALL_ROOT variable and change it to the directory where you
installed the altitude server.  This defaults to ~/altitude, as that is
what the altitude.sh program defaults to.  If you chaned this value when
you installed altitude, then change it here too.

You have to options to configure how the software works.  One method is to
edit the defaults in %OPTIONS at the top of the script.  This is nice,
because it ensures these settings even on first boot.  The downside is that
you will have to redo them after a software update.  The second options is
to skip this step for now, and start the software.  After that, there is a
"/server" command available from the console only.  You can use it to
"list", "set", "unset", "add", and "del" (the last to for arrays) values
which get stored in your persistent "json_stash.txt" file.  These values
will then persist across software updates, as the "json_stash.txt" values
override what is present in the %OPTIONS hash.

If you are placing these values directly into the code, edit and save this file,
it is configured and ready for your use.  If you used the "/server" command
to set these values on a running instance, the values take automatic effect
and the server is configured for use.  There a number of options, but you
really should consider taking immediate action on configuring the following:


  * mapDir  -  Some people like to install server maps in a seperate location
    like ~/altitude/maps/download.  If this is the case for you, set "mapDir"
    to be the part of that location past "maps/".  In our example, you would
    set "mapDir" to 'download'.  It is recommended that you only change this
    if you must.  You can serve more maps, and it is easier on server users
    to serve files from the root maps directory.

  * altBouncer  -  Setting this to 1 will tell your server to upload players
    seen to Tec27's altBouncer.  This is an important resource in the Altitude
    community to find players when they change their names.  This setting
    is only disabled by default because it generates network traffic to
    Tec27's server (it sends an XML stream) and something like that shouldn't
    be on without the server administrator's knowledge.  Unless you have a
    good reason, you should run "/server set altBouncer 1" from console.

  * noviceLevel & aceLevel  -  Altitude allows you to specify a minimum level
    to join a server.  But, that level applies to all ace levels.  Depending on
    how you designed your server, an aceLevel (Ace 1 - Ace 10) of 21
    (unlocked all planes) might be sufficient to join the server.  But, new
    players may still need to be restricted.  Under this situation, you could
    set noviceLevel to 35 to ensure they have the extra skills required to
    participate on the server.  The defaults for these values is set to
    noviceLevel=8 (unlock blue perk) and aceLevel=3 to illustrate the
    concept.  It is entirely possible you wish to set these values to
    1 (or even 0), and you should strongly review these settings.  To disable
    from console, run: "/server set aceLevel 0" and "/server set noviceLevel 0".

  * snarkChance  -  This is set to the liklihood that the server makes a
    snarky comment.  It defaults to 16, meaning there is a 1 in 16 chance.
    You can disable this useless server chatter by setting snarkChance to 0.
    If you want some server chatter, but not a lot, you could also set it
    very high, setting it to 100 would make comments very infrequent.  If you
    don't want your server talking to players, then set this to 0.

  * allowUploads  -  One of the aspects of the alti+server wrapper is its
    ability to help server administrators upload maps.  This is on by default
    if your server has the "curl" program installed.  If you only want to add
    maps the old fashioned way, you should disable this.  There are other
    settings (superAdmin and superAdmins) which allow you to control who
    and from where these commands work.  Look into those if you wish to keep
    this functionality in a restricted fashion.

=========================
Step 3, Start alti+server
=========================
You should be ready to go to start your server, give it a try.  It is highly
recommended that alti+server be run from a detatchable terminal.  Good
choices are GNU Screen, tmux, and dtach.  This will allow for the game server
to continue to function normally, even in the event of a disconnect.

At this time, there is no version of alti+server which can run headless, and
in the background.

==========================================
Appendix 1, How the author sets up servers
==========================================
You can set up the server however works for you.  This is how I set them up,
and it works for me.  If you wish, you may use this as a template for your
own configurations.  This method allows me to run multiple altitude instances
per server easilly (as seperate processes).

  1. I create a new user account to run the server
  2. I switch to this user using either "su -" or "sudo -i"
  2. In this user's home directory, I create "bin" and "src" directories
  3. I "cd src" and run "git clone https://github.com/biell/alti-server.git"
  4. I "cd ~/bin", then run "ln -s ../src/alti-server/alti+server alti+server"
  5. I "cd ~" and install Alti with:
    a. Ensure I have 32 bit libraries installed
      *  On redhat based systems: "sudo yum install glibc.i686"
	 *  On Arch: "sudo pacman -S  lib32-glibc"
	 *  On Debian based systems: "sudo apt-get install lib32gcc1"
    b. "curl -O http://installer.altitudegame.com/0.0.1/altitude.sh"
    c. "bash altitude.sh -c", then specify all defaults.
      *  If this doesn't work, install altitude on a server which does and
	    just rsync it over.
      *  I have not gotten the installer to work on google compute, for example.

This setup will leave you with an "altitude", "bin", and "lib" directory at
the base of your user's home directory.  I like it, because I can update my
server code easilly with the following steps:

  1. Type "/shutdown" in the alti+server console
  2. Run "cd ~/src/alti-server"
  3. Run "git pull"
  4. Run "cd ~"
  5. Run "bin/alti+server"

=============================
Appendix 2, Setting up screen
=============================
The alti+server is purposely designed to be interactive.  As such, it is
not as easy to daemonize.  It is expected that you run it either in
screen or tmux.  This section shows how I set up a server running on
a CentOS 7 based system with two servers.

There are three accounts used here:

  * The user (here user0) account I use to login to the server.  This account
    has passwordless sudo access to the other two accounts.
  * The user (here user1) for the first installation of altitude.
  * The user (here user2) for the second installation of altitude.

First, I create an altitude specific .screenrc file I call ".screenrc-altitude".
I start out with my own personal preferences.  I use a status line so I know
which server I am on.  Here is the relavent sections of my ".screenrc-altitude":
text in your ".screenrc-altitude" file:

~~~~~~~~~~~~
#Set status line:
sorendition dK
caption always '+ %-w%{=u dK} %n %t %{-}%+w%-2= ='
layout autosave 0
layout autosave on

#Specify 80x30 terminal + 1 line for status
width -d 80
height -d 31

#Call my screen session "altitude":
session altitude

#Run servers (note the "^M" is entered in vi by typing ctrl-V ctrl-M):
screen -t one+server 0 sudo -u user1 -i
stuff 'stty rows 30 columns 80^M'
stuff 'bin/alti+server^M'

sleep 5

screen -t two+server 1 sudo -u user2 -i
stuff 'stty rows 30 columns 80^M'
stuff 'bin/alti+server^M'

~~~~~~~~~~~~

With these entries in my ".screenrc-altitude" file, I need to ensure the
altitude server is started when my system is booted.  Unfortunately, CentOS 7
uses the horrible systemd which never should have been created, but we are
stuck with its complete and total crappiness.  So, we create (as root) a
file called "/etc/systemd/system/altitude.service" with the following contents:

~~~~~~~~~~~~
[Unit]
Description=Startup Altitude
After=default.target

[Services]
User=user0
WorkingDirectory=/home/user0
ExecStart=/usr/bin/screen -D -m -c .screenrc-altitude
ExecStop=/usr/bin/screen -S altitude -X quit

[Install]
WantedBy=default.target

~~~~~~~~~~~~

Then, we must tell the horrible systemd that this file should be used, because
it is brain dead.  We might as well start it up too, to test it:

  1. Run "sudo systemctl enable altitude.service"
  2. Then start it with: "sudo systemctl start altitude.service"
  3. Now, attach with "screen -xS altitude"

After this, you should probably familiarize yourself with screen.  You will
need to type ^A (ctrl-A) a lot.  You can type "^A ?" for help on the various
sequences.  Mostly, you can get away with "^A n" to move to the next screen.
If you embed screen sessions in the panes of a tmux session (like I do), then
you will probably need to set "uiPrettyBoxes" to 0, for false with the console
command "/server set uiPrettyBoxes 0".

