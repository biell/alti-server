###########
INSTALL.txt
###########

The installation process for alti+server is very straight forward.  The
software consists of two necessary files.

  1. alti+server
  2. alti+commands.txt

There are three choices for the second file.  If you require your server
to run more than 75 maps, it is recommended you use the file from GitHub
named small_custom_json_commands.txt and rename it.  If you can safely
run with fewer than 75 maps, you should use the original file.  It provides
help to users on how to use the custom commands, making the server much
easier to use and administrate.  If you really need to run more than 100 maps
and your map list is getting trimmed with the small_custom_json_commands.txt,
then you can switch to tiny_custom_json_commands.txt.  This is a bare-bones
command list which provides little help to admins, but supports the necessary
functionality for running a server.


======================
Step 0, Setup Altitude
======================
You must install altitude, and use the server_configurator to setup your
server before beginning.  This is true if you use alti+server or not.
When configuring your server, remember that you can only have one server
if you use alti+server.  server_configurator allows you to configure
multiple servers, as the base Nimbly code supports this.  However, this
does not work with alti+server.


=======================
Step 1, the alti+server
=======================

Copy this file to wherever you want.  It does not need to be co-located
with the Altitiude software, the author stores this code in the account
which runs the software's ~/bin directory.  If you prefer to keep the code
up-to-date via GIT, you can also create a symbolic link from this location
to where you keep the code checked-out.

Find the $INSTALL_ROOT variable and change it to the directory where you
installed the altitude server.  This defaults to ~/altitude, as that is
what the altitude.sh program defaults to.  If you chaned this value when
you installed altitude, then change it here too.

Some people like to install server maps in a seperate location like
~/altitude/maps/download.  If this is the case for you, set $MAPDIR
to be the part of that location past "maps/".  In our example, you would
set $MAPDIR to 'download'.  It is recommended that you only change this
if you must.  You can server more maps, and it is easier on server users
to server files from the root maps directory.

You have to options to configure how the software works.  One method is to
edit the defaults in %OPTIONS at the top of the script.  This is nice,
because it ensures these settings even on first boot.  The downside is that
you will have to redo them after a software update.  The second options is
to skip this step for now, and start the software.  After that, there is a
"/server" command available from the console only.  You can use it to
"list", "set", "unset", "add", and "del" (the last to for arrays) values
which get stored in your persistent "json_stash.txt" file.  These values
will then persist across software updates, as the "json_stash.txt" values
override what is present in the %OPTIONS hash.

If you are placing these values directly into the code, edit and save this file,
it is configured and ready for your use.  If you used the "/server" command
to set these values on a running instance, the values take automatic effect
and the server is configured for use.


==================================
Step 2, the alti+commands.txt file
==================================
The alti+commands.txt file is needed by the server to understand custom
commands and arguments.  This file is used to generate the Altitude server's
custom_json_commands.txt file.  If you have any data in that file, it will
be overwritten.  There are three places where this file can reside:

 1. In your ~/altitude/servers/ directory (or wherever you installed altitude).
    This file should be in the same location as your launcher_config.xml file.
    This is the first place searched, and if the file alti+commands.txt file
    exists here, it will be used.

 2. In the same location as you installed the alti+server script.  This
    is the second place searched, and if the file alti+commands.txt exists
    here, then it will be used.

 3. If (and only if) the alti+server is a symbolic link to another location,
    then that symbolic link will be folled, and the directory containing the
    actual alti+server will be searched.  If the alti+commands.txt file
    exists here, it will be used.  This works well if you are pointing the
    alti+server via symbolic link to a GIT checkout directory, as described
    in Step 1.

=========================
Step 3, Start alti+server
=========================
You should be ready to go to start your server, give it a try.  It is highly
recommended that alti+server be run from a detatchable terminal.  Good
choices are GNU Screen, tmux, and dtach.  This will allow for the game server
to continue to function normally, even in the event of a disconnect.

At this time, there is no version of alti+server which can run headless, and
in the background.

